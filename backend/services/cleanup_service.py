"""
Service x·ª≠ l√Ω t·ª± ƒë·ªông d·ªçn d·∫πp d·ªØ li·ªáu sau khi ho√†n t·∫•t eKYC
"""

import os
import shutil
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import glob
from ..config import settings


class CleanupService:
    """Service t·ª± ƒë·ªông d·ªçn d·∫πp d·ªØ li·ªáu eKYC"""

    def __init__(self):
        self.logger = self._setup_logger()
        self.upload_folder = settings.UPLOAD_FOLDER

    def _setup_logger(self) -> logging.Logger:
        """Thi·∫øt l·∫≠p logger cho cleanup service"""
        logger = logging.getLogger('cleanup_service')
        logger.setLevel(logging.INFO)

        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)

        return logger

    def cleanup_after_ekyc_completion(self, conversation) -> Dict[str, Any]:
        """
        T·ª± ƒë·ªông d·ªçn d·∫πp sau khi ho√†n t·∫•t eKYC th√†nh c√¥ng

        Args:
            conversation: ƒê·ªëi t∆∞·ª£ng conversation hi·ªán t·∫°i

        Returns:
            K·∫øt qu·∫£ d·ªçn d·∫πp
        """
        try:
            cleanup_results = {
                "context_cleared": False,
                "files_cleaned": 0,
                "temp_files_cleaned": 0,
                "errors": []
            }

            # 1. X√≥a d·ªØ li·ªáu context li√™n quan ƒë·∫øn eKYC
            self._clear_ekyc_context(conversation)
            cleanup_results["context_cleared"] = True
            self.logger.info("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu context eKYC")

            # 2. X√≥a c√°c file t·∫°m trong uploads (n·∫øu c√≥)
            temp_files_count = self._cleanup_temp_files()
            cleanup_results["temp_files_cleaned"] = temp_files_count
            self.logger.info(f"‚úÖ ƒê√£ x√≥a {temp_files_count} files t·∫°m")

            # 3. X√≥a c√°c file c≈© (tu·∫ßn t·ª± 24 gi·ªù)
            old_files_count = self._cleanup_old_files()
            cleanup_results["files_cleaned"] = old_files_count
            self.logger.info(f"‚úÖ ƒê√£ x√≥a {old_files_count} files c≈©")

            self.logger.info("üéâ Ho√†n t·∫•t d·ªçn d·∫πp t·ª± ƒë·ªông sau eKYC")

            return {
                "success": True,
                "result": cleanup_results,
                "message": "D·ªçn d·∫πp d·ªØ li·ªáu th√†nh c√¥ng"
            }

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh d·ªçn d·∫πp: {str(e)}")
            return {
                "success": False,
                "error": f"L·ªói d·ªçn d·∫πp: {str(e)}"
            }

    def _clear_ekyc_context(self, conversation) -> None:
        """X√≥a d·ªØ li·ªáu context eKYC kh·ªèi conversation"""
        try:
            # X√≥a c√°c key li√™n quan ƒë·∫øn eKYC
            ekyc_keys = [
                'id_card_url',
                'scan_result',
                'verification_result',
                'verification_success',
                'id_card_image_url',
                'selfie_image_url'
            ]

            for key in ekyc_keys:
                if key in conversation.context:
                    del conversation.context[key]

            # Reset progress v·ªÅ idle
            conversation.set_progress('idle')

        except Exception as e:
            self.logger.error(f"L·ªói x√≥a context: {str(e)}")
            raise

    def _cleanup_temp_files(self) -> int:
        """
        X√≥a c√°c file t·∫°m trong th∆∞ m·ª•c uploads

        Returns:
            S·ªë l∆∞·ª£ng files ƒë√£ x√≥a
        """
        if not os.path.exists(self.upload_folder):
            return 0

        files_deleted = 0

        try:
            # L·∫•y danh s√°ch t·∫•t c·∫£ files trong uploads
            for filename in os.listdir(self.upload_folder):
                filepath = os.path.join(self.upload_folder, filename)

                if os.path.isfile(filepath):
                    try:
                        os.remove(filepath)
                        files_deleted += 1
                        self.logger.debug(f"ƒê√£ x√≥a file t·∫°m: {filename}")
                    except Exception as e:
                        self.logger.warning(f"Kh√¥ng th·ªÉ x√≥a file {filename}: {str(e)}")

        except Exception as e:
            self.logger.error(f"L·ªói khi d·ªçn d·∫πp temp files: {str(e)}")

        return files_deleted

    def _cleanup_old_files(self, max_age_hours: int = 24) -> int:
        """
        X√≥a c√°c files c≈© h∆°n th·ªùi gian quy ƒë·ªãnh

        Args:
            max_age_hours: S·ªë gi·ªù t·ªëi ƒëa ƒë·ªÉ gi·ªØ file

        Returns:
            S·ªë l∆∞·ª£ng files ƒë√£ x√≥a
        """
        if not os.path.exists(self.upload_folder):
            return 0

        files_deleted = 0
        cutoff_time = datetime.now() - timedelta(hours=max_age_hours)

        try:
            for filename in os.listdir(self.upload_folder):
                filepath = os.path.join(self.upload_folder, filename)

                if os.path.isfile(filepath):
                    try:
                        # Ki·ªÉm tra th·ªùi gian t·∫°o file
                        file_time = datetime.fromtimestamp(os.path.getctime(filepath))

                        if file_time < cutoff_time:
                            os.remove(filepath)
                            files_deleted += 1
                            self.logger.debug(f"ƒê√£ x√≥a file c≈©: {filename}")

                    except Exception as e:
                        self.logger.warning(f"Kh√¥ng th·ªÉ x√≥a file c≈© {filename}: {str(e)}")

        except Exception as e:
            self.logger.error(f"L·ªói khi d·ªçn d·∫πp old files: {str(e)}")

        return files_deleted

    def cleanup_specific_files(self, file_patterns: List[str]) -> Dict[str, Any]:
        """
        X√≥a c√°c files theo pattern c·ª• th·ªÉ

        Args:
            file_patterns: Danh s√°ch patterns c·ªßa files c·∫ßn x√≥a

        Returns:
            K·∫øt qu·∫£ x√≥a files
        """
        try:
            files_deleted = 0
            errors = []

            for pattern in file_patterns:
                try:
                    # T√¨m files theo pattern
                    full_pattern = os.path.join(self.upload_folder, pattern)
                    matching_files = glob.glob(full_pattern)

                    for filepath in matching_files:
                        try:
                            if os.path.isfile(filepath):
                                os.remove(filepath)
                                files_deleted += 1
                                self.logger.debug(f"ƒê√£ x√≥a file: {os.path.basename(filepath)}")
                        except Exception as e:
                            error_msg = f"Kh√¥ng th·ªÉ x√≥a {filepath}: {str(e)}"
                            errors.append(error_msg)
                            self.logger.warning(error_msg)

                except Exception as e:
                    error_msg = f"L·ªói pattern {pattern}: {str(e)}"
                    errors.append(error_msg)
                    self.logger.error(error_msg)

            return {
                "success": True,
                "files_deleted": files_deleted,
                "errors": errors
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"L·ªói cleanup specific files: {str(e)}"
            }

    def reset_all_data(self, conversation) -> Dict[str, Any]:
        """
        Reset to√†n b·ªô d·ªØ li·ªáu (conversation + files)

        Args:
            conversation: ƒê·ªëi t∆∞·ª£ng conversation c·∫ßn reset

        Returns:
            K·∫øt qu·∫£ reset
        """
        try:
            # 1. Clear conversation
            conversation.clear()
            conversation.context.clear()
            conversation.set_progress('idle')

            # 2. X√≥a t·∫•t c·∫£ files trong uploads
            files_deleted = self._cleanup_temp_files()

            self.logger.info(f"üîÑ Reset ho√†n t·∫•t: {files_deleted} files ƒë√£ x√≥a")

            return {
                "success": True,
                "files_deleted": files_deleted,
                "message": "Reset to√†n b·ªô d·ªØ li·ªáu th√†nh c√¥ng"
            }

        except Exception as e:
            self.logger.error(f"‚ùå L·ªói reset: {str(e)}")
            return {
                "success": False,
                "error": f"L·ªói reset: {str(e)}"
            }

    def get_storage_info(self) -> Dict[str, Any]:
        """
        L·∫•y th√¥ng tin v·ªÅ dung l∆∞·ª£ng l∆∞u tr·ªØ

        Returns:
            Th√¥ng tin storage
        """
        try:
            if not os.path.exists(self.upload_folder):
                return {
                    "total_files": 0,
                    "total_size_mb": 0,
                    "folder_exists": False
                }

            total_files = 0
            total_size = 0

            for filename in os.listdir(self.upload_folder):
                filepath = os.path.join(self.upload_folder, filename)
                if os.path.isfile(filepath):
                    total_files += 1
                    total_size += os.path.getsize(filepath)

            return {
                "total_files": total_files,
                "total_size_mb": round(total_size / (1024 * 1024), 2),
                "folder_exists": True,
                "upload_folder": self.upload_folder
            }

        except Exception as e:
            self.logger.error(f"L·ªói get storage info: {str(e)}")
            return {
                "error": f"L·ªói l·∫•y th√¥ng tin storage: {str(e)}"
            }

    def schedule_cleanup(self, conversation, delay_seconds: int = 30) -> Dict[str, Any]:
        """
        L√™n l·ªãch d·ªçn d·∫πp sau m·ªôt kho·∫£ng th·ªùi gian

        Args:
            conversation: Conversation c·∫ßn d·ªçn d·∫πp
            delay_seconds: S·ªë gi√¢y delay tr∆∞·ªõc khi d·ªçn d·∫πp

        Returns:
            Th√¥ng tin l√™n l·ªãch
        """
        # Note: ƒê√¢y l√† implementation ƒë∆°n gi·∫£n
        # Trong production c√≥ th·ªÉ d√πng Celery ho·∫∑c background tasks

        import threading
        import time

        def delayed_cleanup():
            time.sleep(delay_seconds)
            self.cleanup_after_ekyc_completion(conversation)

        try:
            cleanup_thread = threading.Thread(target=delayed_cleanup, daemon=True)
            cleanup_thread.start()

            self.logger.info(f"‚è∞ ƒê√£ l√™n l·ªãch d·ªçn d·∫πp sau {delay_seconds} gi√¢y")

            return {
                "success": True,
                "message": f"ƒê√£ l√™n l·ªãch d·ªçn d·∫πp sau {delay_seconds} gi√¢y",
                "delay_seconds": delay_seconds
            }

        except Exception as e:
            self.logger.error(f"L·ªói schedule cleanup: {str(e)}")
            return {
                "success": False,
                "error": f"L·ªói l√™n l·ªãch: {str(e)}"
            }
